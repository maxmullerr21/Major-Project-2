#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

float HP1 = 500, HP2 = 500;
int turn = 1;
char action;
char action1;
int weaponinput1;
int weaponinput2;

// declaring 2 strucutres
struct weapon {
  char type[40];
  char name[40];
  int damage;
  int cooldown;
  int cost;
  int hitchance;
};

struct defence {
  char type[40];
  char name[40];
  int hitpoints;
  float DamageDeduction;
  int cost;
};
struct weapon WeaponCollection[10] = {
    {"Energy", "Tachyon Lance", 3000, 20, 1500, 3},
    {"Energy", "Plasma Lanucher", 400, 2, 700, 6},
    {"Energy", "Zip Zap", 50, 1, 500, 6},
    {"Kinatic", "Guass Canon", 1000, 5, 1500, 3},
    {"Kinatic", "Cabine Gun", 300, 1, 1000, 6},
    {"Kinatic", "Hand Gun", 100, 2, 500, 6},
    {"Melee", "Dark Saber", 2000, 5, 1000, 8},
    {"Melee", "Plasma Knife", 300, 2, 500, 8},
    {"Melee", "Reaper's Scythe", 1500, 5, 800, 9},
    {"Mystic", "Aetherophasic Engine", 2000, 1, 800, 15}};

struct defence DefenceCollection[10] = {
    {"Energy", "Dark Matter Shield", 4000, 1, 1100},
    {"Energy", "Energy Deflector", 2000, 1, 800},
    {"Energy", "Basic Sheild", 700, 1, 500},
    {"Kinatic", "Gravity Gun", 1000, 0.5, 1100},
    {"Kinatic", "Hyper Array", 1000, 0.8, 800},
    {"Kinetic", "Pulsing Array", 500, 0.9, 500},
    {"Melee", "Zero-point Armor", 300, 0.3, 1100},
    {"Melee", "Power Armor", 300, 0.4, 800},
    {"Melee", "Space Armor", 200, 0.6, 500},
    {"Mystic", "Dimensional Lens", 500, 0.5, 1000},
};

// Weaponary Collections
// Here, if a weapon is purchased, the value becomes one in the array, if not,
// it is zero.
int Player1WeaponCollection[10];
int Player2WeaponCollection[10];
int Player1DefenceCollection[10];
int Player2DefenceCollection[10];
int gold1 = 500, gold2 = 550;

int restcount1 = 1;
int restcount2 = 1;

float damagetaken(float x1, float x2) { return x1 - x2; }

int DiceRoll(int x) {
  srand(time(NULL));
  return (rand() % x + 1);
}

void restactionplayer1();
void player1weapontable();
void restactionplayer2();
void player2weapontable();
void player1attack();

void turnfunction() {
  if (turn % 2 == 1) {

    printf("\n\033[1;32mPlayer 1\033[0m, What action would you like to make? "
           "Type "
           "'a' for attack, 'd' for defend, 'p' for purchase, or 'r' for "
           "rest\n");
    scanf("%c", &action);
    getchar();

    if (action != 'a' && action != 'd' && action != 'p' && action != 'r') {
      printf("\n\033[1;31mInvalid input!\033[0m, Enter a valid input!!! \n");
    }
    if (action == 'r') {
      restactionplayer1();
      turn++;
    }

    if (action == 'p') {
      player1weapontable();
    }

    if (action == 'a') {
      player1attack();
    }
  }

  if (turn % 2 == 0) {
    printf("\n \033[1;34mPlayer 2\033[0m, What action would you like to "
           "make? Type 'a' for attack, 'd' "
           "for defend, 'p' for purchase, or 'r' for rest\n");
    scanf("%c", &action1);
    getchar();

    if (action != 'a' && action != 'd' && action != 'p' && action != 'r') {
      printf("\n\033[1;31mInvalid input!\033[0m, Enter a valid input!!! \n");
    }

    if (action1 == 'r') {
      restactionplayer2();
      turn++;
    }

    if (action1 == 'p') {
      player2weapontable();
    }
  }
}

void cooldownplayer1() {
  for (int i = 0; i < 10; i++) {
    if (WeaponCollection[i].cooldown > 1) {
      WeaponCollection[i].cooldown -= 1;
    }
  }
}

void restactionplayer1() {
  gold1 += (50 * restcount1);

  printf("Player 1, you gained \033[1;33m%i\033[0m gold. You now have total "
         "\033[1;33m%i\033[0m gold.\n",
         (50 * restcount1), gold1);
  restcount1++;
  cooldownplayer1();
}

void restactionplayer2() {
  gold2 += (50 * restcount2);

  printf("Player 2, you gained \033[1;33m%i\033[0m gold. You now have total "
         "\033[1;33m%i\033[0m gold.\n",
         (50 * restcount2), gold2);
  restcount2++;

  turn++;
  turnfunction();
}

void player1weapontable() {

  if (gold1 < 500) {
    printf("You do not have enough gold to purchase a weapon\n");
    turnfunction();
  }
  printf("Player 1, What would you like to purchase from? (1 for weapon "
         "or 2 for defences)\n");
  scanf("%i", &weaponinput1);
  getchar();

  if (weaponinput1 == 1) {
    restcount1 = 1;

    printf("| %-20s | %-20s | %-6s | %-9s | %-5s | %-8s |\n", "Type", "Name",
           "Damage", "Cooldown", "Cost", "Hitchance");
    printf("---------------------------------------------------------------"
           "-----------------------\n");

    for (int i = 0; i < 10; i++) {
      printf("| %-20s | %-20s | %-6d | %-9d | %-5d | %-8d |\n",
             WeaponCollection[i].type, WeaponCollection[i].name,
             WeaponCollection[i].damage, WeaponCollection[i].cooldown,
             WeaponCollection[i].cost, WeaponCollection[i].hitchance);
    }
    int weaponpurchase;
    printf("\n\nWhat weapon would you like to purchase? (Enter the number");
    scanf("%i", &weaponpurchase);
    getchar();
    weaponpurchase--;

    if (Player1WeaponCollection[weaponpurchase] == 1) {
      printf("You have already purchased this weapon");
      turnfunction();
    }

    if (gold1 >= WeaponCollection[weaponpurchase].cost) {
      gold1 -= WeaponCollection[weaponpurchase].cost;
      Player1WeaponCollection[weaponpurchase] += 1;
      printf("You have purchased the %s %s for %i gold. You now have %i gold ",

             WeaponCollection[weaponpurchase].type,
             WeaponCollection[weaponpurchase].name,
             WeaponCollection[weaponpurchase].cost, gold1);
    }
    if (gold1 < WeaponCollection[weaponpurchase].cost) {
      printf("You do not have enough gold to purchase this weapon. You "
             "have %i gold.",
             gold1);
    }

    cooldownplayer1();
    turn++;
  }
  if (weaponinput1 != 1 && weaponinput1 != 2) {
    printf("Invalid input, enter a valid input");
    turnfunction();
  }

  if (weaponinput1 == 2) {
    restcount1 = 1;
    printf("| %-20s | %-20s | %-8s | %-9s | %-5s |\n", "Type", "Name",
           "Hitpoint", "Damage Deduction", "Cost");
    printf("-------------------------------------------------------------------"
           "-------------------\n");

    for (int j = 0; j < 10; j++) {
      printf("| %-20s | %-20s | %-9i | %-9f | %-5i |\n",
             DefenceCollection[j].type, DefenceCollection[j].name,
             DefenceCollection[j].hitpoints,
             DefenceCollection[j].DamageDeduction, DefenceCollection[j].cost);
    }
    int weaponpurchase2;
    printf("\n\nWhat weapon would you like to purchase? (Enter the number)");
    scanf("%i", &weaponpurchase2);
    getchar();
    weaponpurchase2--;

    if (Player1DefenceCollection[weaponpurchase2] == 1) {
      printf("You have already purchased this weapon");
      turnfunction();
    }

    if (gold1 >= DefenceCollection[weaponpurchase2].cost) {
      gold1 -= DefenceCollection[weaponpurchase2].cost;
      Player1DefenceCollection[weaponpurchase2] += 1;
      printf("You have purchased the %s %s for %i gold. You now have %i "
             "gold.",
             DefenceCollection[weaponpurchase2].type,
             DefenceCollection[weaponpurchase2].name,
             DefenceCollection[weaponpurchase2].cost, gold1);
    }
    if (gold1 < DefenceCollection[weaponpurchase2].cost) {
      printf("You do not have enough gold to purchase this weapon. You "
             "have %i gold.",
             gold1);
    }
    cooldownplayer1();
    turn++;
  }
}

void player2weapontable() {

  restcount2 = 1;
  if (gold2 < 500) {
    printf("\nYou do not have enough gold to purchase a weapon\n");
    turnfunction();
  }
  printf("Player 2, What would you like to purchase from? (1 for weapon or 2 "
         "for defences)\n");
  scanf("%i", &weaponinput2);
  getchar();

  if (weaponinput2 == 1) {
    printf("| %-20s | %-20s | %-6s | %-9s | %-5s | %-8s |\n", "Type", "Name",
           "Damage", "Cooldown", "Cost", "Hitchance");
    printf("-----------------------------------------------------------"
           "----"
           "-----------------------\n");

    for (int i = 0; i < 10; i++) {
      printf("| %-20s | %-20s | %-6d | %-9d | %-5d | %-8d |\n",
             WeaponCollection[i].type, WeaponCollection[i].name,
             WeaponCollection[i].damage, WeaponCollection[i].cooldown,
             WeaponCollection[i].cost, WeaponCollection[i].hitchance);
    }
    int weaponpurchase1;
    printf("\n\nWhat weapon would you like to purchase? (Enter the "
           "number)");
    scanf("%i", &weaponpurchase1);
    getchar();
    weaponpurchase1--;

    if (Player2WeaponCollection[weaponpurchase1] == 1) {
      printf("You have already purchased this weapon");
      turnfunction();
    }

    if (gold2 >= WeaponCollection[weaponpurchase1].cost) {
      gold2 -= WeaponCollection[weaponpurchase1].cost;
      Player2WeaponCollection[weaponpurchase1] += 1;
      printf("You have purchased the %s %s for %i gold. You now have %i "
             "gold.",
             WeaponCollection[weaponpurchase1].type,
             WeaponCollection[weaponpurchase1].name,
             WeaponCollection[weaponpurchase1].cost, gold2);

      if (gold2 < WeaponCollection[weaponpurchase1].cost) {
        printf("You do not have enough gold to purchase this weapon. You "
               "have %i gold.",
               gold2);
      }
    }
    cooldownplayer1();

    if (weaponinput2 == 2) {
      restcount2 = 1;
      printf("| %-20s | %-20s | %-8s | %-9s | %-5s |\n", "Type", "Name",
             "Hitpoint", "Damage Deduction", "Cost");
      printf(
          "-------------------------------------------------------------------"
          "-------------------\n");

      for (int j = 0; j < 10; j++) {
        printf("| %-20s | %-20s | %-9i | %-9f | %-5i |\n",
               DefenceCollection[j].type, DefenceCollection[j].name,
               DefenceCollection[j].hitpoints,
               DefenceCollection[j].DamageDeduction, DefenceCollection[j].cost);
      }
      int weaponpurchase3;
      printf("\n\nWhat weapon would you like to purchase? (Enter the number)");
      scanf("%i", &weaponpurchase3);
      getchar();
      weaponpurchase3--;

      if (Player2DefenceCollection[weaponpurchase3] == 1) {
        printf("You have already purchased this defence.");
        turnfunction();
      }

      if (gold2 >= DefenceCollection[weaponpurchase3].cost) {
        gold2 -= DefenceCollection[weaponpurchase3].cost;
        Player2DefenceCollection[weaponpurchase3] += 1;
        printf(
            "You have purchased the %s %s for %i gold. You now have %i gold.",
            DefenceCollection[weaponpurchase3].type,
            DefenceCollection[weaponpurchase3].name,
            DefenceCollection[weaponpurchase3].cost, gold2);
      } else {
        printf("You do not have enough gold to purchase this defence. You have "
               "%i gold.",
               gold2);
      }
      cooldownplayer1();
      turn++;
    }
    if (weaponinput2 != 1 && weaponinput2 != 2) {
      printf("Invalid input, enter a valid input");
      turnfunction();
    }
  }

void player1attack() {
    restcount1 = 1;
    printf("Choose a weapon from table to attack with:\n");

    int choice;
    scanf("%d", &choice);
    getchar();
    choice--;

    if (choice < 0 || choice >= 10 || Player1WeaponCollection[choice] != 1) {
      printf("Invalid choice or weapon is not available.\n");
      turnfunction();
    }

    if (Player1WeaponCollection[choice] == 1 &&
        WeaponCollection[choice].cooldown == 1) {

      printf("You have chosen the %s %s\n", WeaponCollection[choice].type,
             WeaponCollection[choice].name);
    }
    if (WeaponCollection[choice].cooldown > 1) {
      printf("The weapon you have chose is on cooldown, please wait %i turns "
             "before using it again\n",
             WeaponCollection[choice].cooldown);
      turnfunction();
    }
    int diceroll;
    diceroll = DiceRoll(WeaponCollection[choice].hitchance);
    if (diceroll < 3) {
      printf("Hit successful! You did %i damage. \n",
             WeaponCollection[choice].damage);
      turn++;
    } else {
      printf("Missed!\n");
      turn++;
    }
  }
}
  // main program
  int main() {

    for (int i = 0; i < 10; i++) {
      Player1WeaponCollection[i] = 0;
    }

    for (int i = 0; i < 10; i++) {
      Player2WeaponCollection[i] = 0;
    }

    // defences collection
    int Player1DefenceCollection[10];
    int Player2DefenceCollection[10];
    for (int i = 0; i < 10; i++) {
      Player1DefenceCollection[i] = 0;
    }

    // user actions

    while (1) {
      turnfunction();

      // since it's a turn based game, figure out a way using code to determine
      // whoes turn is it. Also figure out a way to let users take turns

      // Here, Let's set up the rest action for the code.
      // The rest action allows the player to gain extra gold during that turn.
      // The amount of gold the user gains depends on the number of turns the
      // user has been resting in a row.

      // For example, if the user rests for the first time, they gain 50 gold.
      // if the same player rests for another time next turn, they gain 100 gold
      // next turn. If the user takes a different action other than resting, the
      // gold gain value resets to 0. The gained gold should be added to the
      // gold1 and gold2 values. gold1 represents the amount of gold the player
      // 1 has, gold2 represents the amount of gold the player 2 has. You will
      // first need to create an if sentence to see if the input from the user
      // is 'r' or not. Then, you have to decide which player is taking the
      // action, and how much gold is being added. you final print sentence
      // should be "Player #, you gained %i gold. You now have total %i gold.\n"

      // the purchase action should allow user to purchase weapon or defences
      // which they do not have. users can not purchase the same weapons or
      // defences in which they already have if the user's action input is
      // purchase or r, your program should excute the code here. the code
      // should first ask users whether to purchase weapons or defences. if the
      // user chooses to purchase weapon, your code will use a function to print
      // out a table for all the weapons, then ask the users to select if the
      // user choose to puchase defence , your code will use a function to print
      // out a table for all the defences, then ask the users to select after
      // the user has purchased a weapon or a defence, the cost of the item will
      // be deducted from the user's net gold, and the item will be added to
      // user's avaible inventory. if the user does not have enough gold for an
      // equipment, your code should tell them so, and direct them back to the
      // question which weapon they would like to buy.

      // for the attack action, as you ran the program, if the user chooses to
      // attack and have availble weapons, your program will ask users to choose
      // the attacking weapons. each weapon has a cooldown and a hitchance. the
      // cooldown works like this: every time a weapon is attacked, the weapon
      // enters into the cooldown, making it unavaible for a number of turns.
      // the exact number of turns depends on the weapon. You can find this
      // value in the array WeaponCollection. That means, if the cooldown value
      // is 20, the weapon will be unavaible for 20 turns after attacking. The
      // way to achieve that is use the Player1WeaponCollection and
      // Player2WeaponCollection, which are 2 int arrays. If the weapon is
      // avaible, the position for that weapon is thoes arrays should have
      // value 1. If the weapon is not puchased, the value should be 0. When the
      // weapon enters into a cooldown, that value changes into the cooldown
      // value+1, and with every passing turn, the value will be reduced by 1000
      // be careful that the value should not be reduced to smaller than 1.

      // for the hitchance, you will need to use the DiceRoll function.
      // Each weapon structure has a hitchance memeber which is an intger.
      // When you attack with that weapon, you randomnize a number from 1 to the
      // hitchance value of the weapon using the function. If the result is
      // smaller than 3, then you hit successfully, else, you miss. that means
      // bigger hitchance value will have a smaller chance to hit in this
      // algerithm

      // defence action allows a user to equip a specific defensive item
      // one 1 defence can be equiped at one time.

      // for the defensive items, there are two important attributes: hitpoints
      // and deduction. hitpoints is a flat amount of damage that this item can
      // take. Hitpoints will take damage for that player before the player
      // takes any damage. whenever a defence takes damage, the hitpoints of
      // that defence item goes down by that amount. when the hitpoints of the
      // item reaches 0, then the item breaks, causing any excessive damage to
      // be dealt directly to the user. Example: if an item has 200hp, and a hit
      // attack deals 500 damage after deduction. Then the item will take 200
      // damage for the user and becomes broken, and the user takes the rest 300
      // damage. Be mindful that the hitpoints of the defence can not recharged
      // by requiping the same item.

      // For the decution, it is a percentage reduction of the damage that both
      // the user and the armor will take. total damage taken = damage dealt by
      // the weapon * the damage deduction For example, 1 deduction means the
      // armor is not reducing any damage from the weapon. 0.1 deduction means
      // the armor is reducing 90% of the damage from the weapon. The damage
      // deduction will always be there as long as the item is equiped, even
      // though the item is broken.

      // Your final step to do is to balance the stats of the game to make sure
      // there are no overpowered strategies or items. This step is called the
      // testing of the game. Usually you will need people to play your game for
      // some time to find out any unbalanced item/stats/designs, and bugs. Once
       // you have finished this step, congratulations, you have designed/created
      // your very first game using C.
    }
  }
  return 0;
}
